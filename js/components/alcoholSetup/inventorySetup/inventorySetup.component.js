(function () {
    'use strict';

	var qt = function ($uibModalInstance) {
        var that = this;
		
		that.q_title = 'Inventory Setup Instructions';
						
		that.q_texts = '<article style="display: block;"><p><b>Alcohol Inventory Setup</b> – this is the page which you will use to add all of your inventory items for each vendor. This page will show all the vendors which you selected on the previous page. The vendor that you are working with at the moment will be highlighted in blue. If you selected a vendor that was already in the Artecsan database, that vendor may already have a database of items. If you added a new vendor, it will also mean that you have to add all of the vendor items as well.<br/><br/><b>Step 1:</b> Select the vendor which you want to work with. The vendor will be highlighted in Blue<br/><br/><b>Step 2:</b> Select Modify/Add which will produce a popup screen which you can enter all of your vendor items into.<br/><br/><b>Step 3:</b> Select the + symbol in the right hand corner. This will open up the necessary fields to add your items.<br/><br/><b>Step 4:</b> Add the necessary details to the add/modify vendor fields. NOTE: We suggest acquiring a purchases list from your vendor which includes all of the needed information. Skrible can also import the data for you if its in excel or csv format and all of the fields are completed<ul><li><b>Sku</b> – this info will come from the vendor. Be sure to use the vendor sku and not the manufacturer sku. The vendor sku is how the vendor knows which items you really want. The difference between manufacturer sku and vendor sku is the manufacturer sku is generated by the maker of the product while the vendor sku is generated by the seller of the produce. Therefore you must use the vendor sku</li><li><b>Item Name</b> – you may enter the item name that works for you however we suggest duplicating the name that was provided by the vendor</li><li><b>Category/Subcategory</b> – categories are preset and as of now cannot be changed</li><li><b>Size</b> – this is a dropdown list of the most common sizes. If you have an unusual size that you would like for us to add please email your request to admin@artecsan.com</li><li><b>Full Unit Weight</b> – if this option appears you will need to add the full weight of an unopened bottle in ounces. You can do this by simply placing a full unopen bottle on a scale, weighing it in ounces and entering the number here</li><li><b>Unit</b> – is the number of individual items in a case. For example: a case of alcohol that has 12 bottles is the same as 12 units.</li><li><b>Case$</b> - automatically calculated based on Unit X Item($)</li><li><b>Item($)</b> – this is the individual price of a single unit. You can get this number by multiplying a case by units. For example: if we have 12 units (bottles) that cost $24 it would mean that the Item($) is $2</li><li><b>Substitute For</b> - If you purchase the same item from multiple vendors or if you have items that are used as replacements, you can assign them to parent items. For example: if I purchase a case of Greygoose from vendor #1 but they run out so I purchase from Vendor #2. I would assign the Greygoose from Vendor #1 as the parent of Greygoose from vendor #2. This will merge the two items so that only one item merges the transactions and details and only one item shows on the reports.</li></ul>Once the data is in you may select “Save” and all the item details will be added to your restaurant.</p></article>';

        that.skip = function () {
            $uibModalInstance.dismiss('cancel');
        }
    };
	
    function inventorySetupController(api, $state, auth, localStorageService, SweetAlert, $rootScope, restaurant, $uibModal, core,$scope) {

        if (!auth.authentication.isLogged) {
            $state.go('home');
            return;
        }

        var that = this;
        that.form = {};
        that.api = api;
        that.auth = auth;


        that.restaurant_id = localStorageService.get('restaurant_id');  // {restaurant_id : 323}

        if (!that.restaurant_id) {
            $state.go('home');
            return
        }


        that.inventoryList = [];
        that.vendors = [];
        that.inventoryListSelected = [];
        that.currentVendor = null;
        that.searchModel = {
            order_by: 'item_name', // id, name, city, date, zip
            order_way: "ASC",  //ASC/DESC
            paginationOffset: 0, // 0 by default
            paginationCount: 25, //25 by default,
            inRequest: false,
            paginationTotal: 0,

            city: null,
            item_name: null,
            sub_category: null,
            vendor_sku: null,
            filter: 'any',
            category: null
        };

        if (restaurant.data.permissions) {
            that.permissions = restaurant.data.permissions
        }

        $rootScope.$on('restaurantSelected', function () {
            that.permissions = restaurant.data.permissions;
        });
		
		$scope.SetUpStatus=0;
		if(restaurant.data.info){
			$scope.SetUpStatus = restaurant.data.info.is_setup_completed;
		}
		
		that.showInfo = function () {
			//Quick tutorial
			var modalInstance = $uibModal.open({
					animation: true,
					templateUrl: 'quick_tutorial.html',
					controller: qt,
					controllerAs: 'qt',
					windowClass: "animated fadeIn modal-lgg",
					size: 'lg'
			});
			//Quick tutorial
		}
		
        var getInventoriesByVendor = function () {
            that.api.get_active_inventory_by_vendor({
                vendor_id: that.currentVendor.id,
                inventory_type_id: 2
            }, that.restaurant_id.restaurant_id).then(function (res) {
                that.inventoryListSelected = res.data.data.sku
            });
        };

        that.search = function (keyword) {

            that.searchModel.inRequest = true;

            var m = {
                order_by: that.searchModel.order_by,
                order_way: that.searchModel.order_way,
                paginationOffset: that.searchModel.paginationOffset,
                paginationCount: that.searchModel.paginationCount,

                city: that.searchModel.city,
                item_name: that.searchModel.item_name,
                sub_category: that.searchModel.sub_category,
                vendor_sku: that.searchModel.vendor_sku,
                filter: that.searchModel.filter,
                category: that.searchModel.category,
                inventory_type_id: 2
            };

            for (var i in m) {
                //if (!m[i]) {
				if (m[i] == null) {
                    delete  m[i]
                }
            }

            if (keyword) {
                m.paginationOffset = 0;
                if (that.searchModel.order_by == keyword) {
                    that.searchModel.order_way = m.order_way == 'ASC' ? 'DESC' : 'ASC';
                    m.order_way = m.order_way == 'ASC' ? 'DESC' : 'ASC'
                } else {
                    that.searchModel.order_by = keyword;
                    m.order_by = keyword;
                }
            }
            if (m.paginationOffset > 0 && !keyword) {
                m.paginationOffset = (m.paginationOffset - 1) * m.paginationCount;
            }


            api.get_inventory_by_vendor(m, that.currentVendor.id).then(function (res) {
                try {
                    that.inventoryList = res.data.data.sku;
                    that.searchModel.paginationTotal = res.data.data.total;
                } catch (e) {
                    console.log(e);
                }
                that.searchModel.inRequest = false;
            }, function () {
                that.searchModel.inRequest = false;
            });

            getInventoriesByVendor()
        };

        that.selectVendor = function (vendor) {

            that.vendors.forEach(function (val, key) {
                if (vendor.id == val.id) {
                    val.is_selected = true
                } else {
                    val.is_selected = false
                }
            });

            that.currentVendor = vendor;

            that.search();


        };


        var getChosenVendors = function () {

            api.get_chosen_vendors(that.restaurant_id.restaurant_id, {vendor_type_id: 2}).then(function (res) {
                try {
                    that.vendors = res.data.data.vendors;
                    if (!that.vendors.length) {
                        $state.go('alcoholSetup.vendor');
                        return
                    }
                    that.vendors[0].is_selected = true;
                    that.vendors[0].is_first = true;
                    that.vendors[that.vendors.length - 1].is_last = true;
                    that.currentVendor = that.vendors[0];
                    that.search();
                } catch (e) {
                    console.log(e);
                }
            })
        };


        that.addInventory = function (inventory) {

            var id = that.restaurant_id.restaurant_id;

            var m = {
                vendor_id: that.currentVendor.id,
                sku_id: inventory.id,
                is_active: inventory.is_used,
                inventory_type_id: 2,
				action: 'update'
            };

            that.api.add_inventory(id, m).then(function () {
                getInventoriesByVendor();
                that.search();

            });

        };

        that.deleteInventory = function (inventory) {

            if (inventory.is_used_by_receipts == 1) {
                SweetAlert.swal({
                    title: '',
                    text: 'You can not remove the inventory item, if he has any elements with historical data, or if the item is used in any menu. Instead, you can disable inventory item, but first remove it from menus in which it is used.',
                    type: "warning",
                    confirmButtonColor: "#DD6B55"
                });
                return;
            }

            var id = that.restaurant_id.restaurant_id;

            var m = {
                vendor_id: that.currentVendor.id,
                sku_id: inventory.id,
                is_active: 0,
                inventory_type_id: 2,
				action: 'delete'
            };

            that.api.add_inventory(id, m).then(function () {
                getInventoriesByVendor();
                that.search();

            });

        };

        that.addUniqueItems = function () {
            var modalInstance = $uibModal.open({
                templateUrl: 'js/components/alcoholSetup/inventorySetup/addUniqueItems/addUniqueItems.html',
                controller: 'alcoholAddUniqueItemsController',
                windowClass: "animated fadeIn modal-lgg",
                controllerAs: '$ctr',
                size: 'lg2x',
                resolve: {
                    searchParams: {
                        vendor_id: that.currentVendor.id,
                        restaurant_id: that.restaurant_id.restaurant_id,
                        vendors_name: that.vendors
                    }
                }
            });

            modalInstance.result.then(function (result) {
                that.search()
            }, function (reason) {
                that.search()
            });
        };


        that.back = function () {
            if (that.currentVendor.is_first) {
                $state.go('alcoholSetup.vendor');
            } else {
                var prevVendor;

                for (var i = 0; that.vendors.length > i; i++) {
                    if (that.vendors[i].is_selected) {
                        prevVendor = that.vendors[i - 1]
                    }
                }

                that.selectVendor(prevVendor);
            }
        };

        that.next = function () {

            if (that.currentVendor.is_last) {
                $state.go('alcoholSetup.serving-details');
            } else {
                var nextVendor;

                for (var i = 0; that.vendors.length > i; i++) {
                    if (that.vendors[i].is_selected) {
                        nextVendor = that.vendors[i + 1]
                    }
                }

                that.selectVendor(nextVendor);
            }

            // SweetAlert.swal({
            //     title: 'At first select inventory',
            //     showConfirmButton: false,
            //     type: "error",
            //     timer: 2000
            // });
        };

        that.$onInit = function () {
            core.getRefbooks().then(function (res) {
                that.refbooks = res;
                getChosenVendors();
            });
        };

    }

    inventorySetupController.$inject = ['api', '$state', 'auth', 'localStorageService', 'SweetAlert', '$rootScope', 'restaurant', '$uibModal', 'core','$scope'];

    angular.module('inspinia').component('alcoholInventorySetupComponent', {
        templateUrl: 'js/components/alcoholSetup/inventorySetup/inventorySetup.html',
        controller: inventorySetupController,
        controllerAs: '$ctr',
        bindings: {}
    });

})();